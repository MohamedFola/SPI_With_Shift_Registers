
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000745  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000350  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003aa  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000105  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Init_Master>:
{
	SPI_Data_Register = Data;                              // Load the Data to SPDR register
	while(READ_BIT(SPI_Contorl_Register, SPIF) == 0);      // wait until the transmission is over
	
	return SPI_Data_Register;                              // Return the received Data
}
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	97 b3       	in	r25, 0x17	; 23
  76:	90 6b       	ori	r25, 0xB0	; 176
  78:	97 bb       	out	0x17, r25	; 23
  7a:	97 b3       	in	r25, 0x17	; 23
  7c:	9f 7b       	andi	r25, 0xBF	; 191
  7e:	97 bb       	out	0x17, r25	; 23
  80:	98 b3       	in	r25, 0x18	; 24
  82:	90 61       	ori	r25, 0x10	; 16
  84:	98 bb       	out	0x18, r25	; 24
  86:	82 fb       	bst	r24, 2
  88:	99 27       	eor	r25, r25
  8a:	90 f9       	bld	r25, 0
  8c:	90 6c       	ori	r25, 0xC0	; 192
  8e:	9e b9       	out	0x0e, r25	; 14
  90:	06 2f       	mov	r16, r22
  92:	01 70       	andi	r16, 0x01	; 1
  94:	10 e0       	ldi	r17, 0x00	; 0
  96:	00 0f       	add	r16, r16
  98:	11 1f       	adc	r17, r17
  9a:	02 95       	swap	r16
  9c:	12 95       	swap	r17
  9e:	10 7f       	andi	r17, 0xF0	; 240
  a0:	10 27       	eor	r17, r16
  a2:	00 7f       	andi	r16, 0xF0	; 240
  a4:	10 27       	eor	r17, r16
  a6:	41 70       	andi	r20, 0x01	; 1
  a8:	c4 2f       	mov	r28, r20
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	d9 2f       	mov	r29, r25
  ae:	cc 0f       	add	r28, r28
  b0:	dd 1f       	adc	r29, r29
  b2:	cc 0f       	add	r28, r28
  b4:	dd 1f       	adc	r29, r29
  b6:	cc 0f       	add	r28, r28
  b8:	dd 1f       	adc	r29, r29
  ba:	a2 2f       	mov	r26, r18
  bc:	a1 70       	andi	r26, 0x01	; 1
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	aa 0f       	add	r26, r26
  c2:	bb 1f       	adc	r27, r27
  c4:	aa 0f       	add	r26, r26
  c6:	bb 1f       	adc	r27, r27
  c8:	81 fb       	bst	r24, 1
  ca:	ee 27       	eor	r30, r30
  cc:	e0 f9       	bld	r30, 0
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	00 65       	ori	r16, 0x50	; 80
  d6:	c0 2b       	or	r28, r16
  d8:	ac 2b       	or	r26, r28
  da:	ea 2b       	or	r30, r26
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	8e 2b       	or	r24, r30
  e0:	8d b9       	out	0x0d, r24	; 13
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	08 95       	ret

000000ec <SPI_Master_Send>:


// Function to Transmit Data from Master
void SPI_Master_Send(unsigned char Data)
{
	SPI_Data_Register = Data;                             // Load the Data to SPDR register
  ec:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPI_Status_Register, SPIF) == 0);      // wait until the transmission is over
  ee:	77 9b       	sbis	0x0e, 7	; 14
  f0:	fe cf       	rjmp	.-4      	; 0xee <SPI_Master_Send+0x2>
}
  f2:	08 95       	ret

000000f4 <SPI_Master_receive>:


// Function to receive Data for Master
unsigned char SPI_Master_receive(){
	while(READ_BIT(SPI_Status_Register, SPIF) == 0);           // wait to receive all Data
  f4:	77 9b       	sbis	0x0e, 7	; 14
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <SPI_Master_receive>
	return SPI_Data_Register;                             // return the received Data
  f8:	8f b1       	in	r24, 0x0f	; 15
}
  fa:	08 95       	ret

000000fc <main>:
#include "_SPI_Driver_Master.h"
#define EN 3

int main()
{
	SET_BIT_OUTPUT(B, EN);
  fc:	87 b3       	in	r24, 0x17	; 23
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	87 bb       	out	0x17, r24	; 23
	SPI_Init_Master(Clk_Rate_FOSC_divisable_by_16, Data_Order_MSB, Clk_Polarity_IDLE_LOW, Clk_Phase_LEADING);
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Init_Master>
	unsigned char data;
	
	while (1)
	{
		SET_BIT_HIGH(SPI_Port_Name, SS);
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	80 61       	ori	r24, 0x10	; 16
 112:	88 bb       	out	0x18, r24	; 24
		SPI_Master_Send(0x00);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 76 00 	call	0xec	; 0xec <SPI_Master_Send>
		SET_BIT_LOW(SPI_Port_Name, SS);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	88 bb       	out	0x18, r24	; 24
		data = SPI_Master_receive();
 120:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_Master_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	ef e1       	ldi	r30, 0x1F	; 31
 126:	fe e4       	ldi	r31, 0x4E	; 78
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x2c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x32>
 12e:	00 00       	nop
		_delay_ms(10);
		
		SET_BIT_LOW(B, EN);
 130:	98 b3       	in	r25, 0x18	; 24
 132:	97 7f       	andi	r25, 0xF7	; 247
 134:	98 bb       	out	0x18, r25	; 24
		SPI_Master_Send(data);
 136:	0e 94 76 00 	call	0xec	; 0xec <SPI_Master_Send>
		SET_BIT_HIGH(B, EN);
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	88 bb       	out	0x18, r24	; 24
 140:	8f e1       	ldi	r24, 0x1F	; 31
 142:	9e e4       	ldi	r25, 0x4E	; 78
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x48>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x4e>
 14a:	00 00       	nop
 14c:	e0 cf       	rjmp	.-64     	; 0x10e <main+0x12>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
